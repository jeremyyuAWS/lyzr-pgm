Metadata-Version: 2.4
Name: lyzr-pgm
Version: 0.1.0
Summary: Lyzr Agent Manager scripts for creating, managing, and running Manager/Role agents with YAML workflows.
Author: Lyzr AI Team
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: pyyaml
Requires-Dist: httpx
Requires-Dist: pytz
Requires-Dist: tzlocal

# Lyzr Agent Manager

This repo contains utilities and scripts for **creating, managing, running, and linking Lyzr agents** (both Role agents and Manager agents) from YAML definitions.

It ensures consistent payload formatting for the Lyzr API and provides automation for creating and linking manager agents with their subordinate role agents.

---

## 📦 Project Structure

```

.
├── agents/
│   ├── managers/            # Manager agent YAMLs
│   └── roles/               # Role agent YAMLs
├── scripts/
│   ├── create\_agent.py             # Create a single agent from YAML
│   ├── create\_manager.py           # Create manager agent with role(s) from YAML
│   ├── create\_manager\_from\_yaml.py # ✅ Create manager directly from generated output YAML
│   ├── create\_from\_output.py       # ⭐⭐ Recursively create Managers + Workflows from output folder
│   ├── run\_agent.py                # Run inference on an agent by ID
│   ├── run\_list\_iterate.py         # ⭐⭐ Run a manager across list of use cases (with optional --push ⭐⭐⭐)
│   ├── parse\_json\_to\_yaml.py       # Parse manager JSON → role YAMLs
│   ├── list\_agents.py              # List all existing agents
│   ├── delete\_agents.py            # Delete all agents (with dry-run mode)
│   ├── runme.py                    # Batch runner (uses UPDATEME.yaml)

````

---

## 🚀 Usage

### 🔹 Create Agents

...

---

### 🔭 Create From Output (Managers + Workflows in Bulk)

If you have an **output folder** containing multiple subfolders (each with a `*Manager*.yaml` and `workflow_*.yaml`), you can auto-create them all:

```bash
python -m scripts.create_from_output output/YAML_COMPOSER_MANAGER_v1 --debug
````

This will:

1. Recursively scan all subfolders under `output/YAML_COMPOSER_MANAGER_v1/`
2. For each subfolder:

   * Create the Manager agent (and its Roles) from `*Manager*.yaml`
   * Create the Workflow from the latest `workflow_*.yaml`
3. Print results (✅ success, ❌ failure) in sequence

Example output:

```
📂 Processing subfolder: output/YAML_COMPOSER_MANAGER_v1/hr_helpdesk_agent
🚀 Creating Manager + Roles from HR_Helpdesk_Manager_v1.yaml
✅ Manager created: HR_Helpdesk_Manager_v1 (id=68b...e4)
🚀 Creating Workflow from workflow_20250828_202636.yaml
✅ Workflow created: HR Helpdesk Flow (id=215...c7)
```

---

### 🔁 Run a Manager Across a Use Case List

You can run a **Manager YAML** against a **Use Case list YAML** (e.g., HR, BFSI, etc.) to generate schema-compliant agents + workflows.

Example with HR use cases:

```bash
python -m scripts.run_list_iterate agents/managers/YAML_COMPOSER_MANAGER_v1.yaml agents/use_cases_hr.yaml
```

Example with BFSI use cases:

```bash
python -m scripts.run_list_iterate agents/managers/YAML_COMPOSER_MANAGER_v1.yaml agents/use_cases_bfsi.yaml
```

#### 🆕 `--push` Flag

By default, `run_list_iterate` only saves generated YAMLs locally (under `output/`).

If you want the created YAML agents to be **pushed to the Lyzr platform automatically**, add the `--push` flag:

* Generate YAMLs only:

  ```bash
  python -m scripts.run_list_iterate agents/managers/YAML_COMPOSER_MANAGER_v1.yaml agents/use_cases_bfsi.yaml
  ```

* Generate **and push**:

  ```bash
  python -m scripts.run_list_iterate agents/managers/YAML_COMPOSER_MANAGER_v1.yaml agents/use_cases_bfsi.yaml --push
  ```

Example output with push:

```
▶️ Running agents/use_cases_bfsi.yaml with manager agents/managers/YAML_COMPOSER_MANAGER_v1.yaml
📝 Saved canonical agent YAML → output/Fraud_Detection_Agent.yaml
...
🚀 Push flag enabled — pushing created agents to Lyzr platform...
✅ Pushed agent Fraud_Detection_Agent
✅ Pushed agent Claims_Processing_Agent
🤖 Created manager BFSI_Manager_v1 with 25 linked roles
```
